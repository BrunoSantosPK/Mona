<!DOCTYPE html>
<html lang="pt-br">

    <head>
        <meta charset="utf-8">
        <link href="/public/styles.css" rel="stylesheet" >
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title>Perfil de Jogador</title>
        <link rel="canonical" href="/">
        <meta name="description" content="Realize seu teste de perfil e descubra o seu arquétipo de jogador. É rápido e grátis!">
        <meta name="keywords" content="Gamificação, Explorador, Conquistador, Competitivo, Socializador, Perfil Comportamental">
    </head>

    <body form-id="<%= idForm %>">

        <% slides.forEach((slide, i) => { %>
            <div class="slide <%= (i == 0) ? '' : 'hide' %>" rule="<%= slide.state %>" id="slide-<%= i %>">
                <div class="slide-content">
                    <p><%= slide.text %></p>
                    <% if(slide.showQuestions) { %>
                        <% slide.questions.options.forEach((item, j) => { %>
                            <label for="question-<%= slide.questions.groupId %>">
                                <input
                                    type="radio"
                                    id="word-<%= item.wordId %>"
                                    name="question-<%= slide.questions.groupId %>"
                                    word-id="<%= item.wordId %>"
                                >
                                <%= item.word %>
                            </label>
                        <% }) %>
                    <% } %>
                    <div class="button" onclick="action('<%= i %>')"><%= slide.buttonText %></div>
                </div>
            </div>
        <% }) %>

    </body>

    <script>

        // Gerencia a execução do formulário
        const control = {
            formId: parseInt(document.getElementsByTagName("body")[0].getAttribute("form-id")),
            startTime: new Date(),
            duration: 0,
            words: [],
            ip: ""
        };

        // Sistemas de regras
        const rules = {
            "next-page": currentId => {
                nextPage(currentId);
                control.startTime = new Date();
            },
            "validate-next": currentId => {
                const valid = validate(currentId);
                if(valid) nextPage(currentId);
                else alert("Selecione uma opção antes de prosseguir");
            },
            "validate-last": currentId => {
                const valid = validate(currentId);
                if(valid) nextPage(currentId);
                else alert("Selecione uma opção antes de prosseguir");
            },
            "validate-send": currentId => {
                const valid = validate(currentId)
                if(valid) calculate();
                else alert("Selecione uma opção para finalizar")
            }
        };

        function action(currentId) {
            const currentDiv = document.getElementById(`slide-${currentId}`);
            const rule = currentDiv.getAttribute("rule");
            rules[rule](currentId);
        }

        function validate(currentId) {
            // Acessa o slide e busca os inputs existentes
            const slide = document.getElementById(`slide-${currentId}`);
            const inputs = slide.getElementsByTagName("input");
            const selected = { checked: false, id: 0 };

            // Verifica se algum indicador foi selecionado
            for(let i = 0; i < inputs.length; i++) {
                if(inputs[i].checked) {
                    selected.checked = true;
                    selected.id = parseInt(inputs[i].getAttribute("word-id"));
                }
            }

            if(selected.checked) {
                control.words.push(selected.id);
            }

            return selected.checked;
        }

        function nextPage(currentId) {
            const currentDiv = document.getElementById(`slide-${currentId}`);
            const nextDiv = document.getElementById(`slide-${parseInt(currentId) + 1}`);

            nextDiv.classList.remove("hide");
            currentDiv.classList.add("slide-bottom-to-top-hide");
            nextDiv.classList.add("slide-bottom-top-top-show");

            setTimeout(() => {
                currentDiv.classList.add("hide");
                currentDiv.classList.remove("slide-bottom-to-top-hide");
                nextDiv.classList.remove("slide-bottom-top-top-show")
            }, 800);
        }

        async function calculate() {
            try {
                // Gerencia os dados para enviar ao servidor
                let req = await fetch("https://api.ipify.org/?format=json");
                let res = await req.json();
                
                control.duration = ((new Date()) - control.startTime) / 1000;
                control.ip = res.ip;

                // Faz a requisição para cálculo de personalidade
                req = await fetch("/calculate", {
                    method: "POST",
                    body: JSON.stringify({
                        ip: control.ip,
                        formId: control.formId,
                        duration: control.duration,
                        words: control.words
                    }),
                    headers: {
                        Accept: "application/json",
                        "Content-Type": "application/json"
                    }
                });
                res = await req.json();

                console.log(res);

            } catch(error) {
                alert(error.message);
            }
        }

    </script>

</html>